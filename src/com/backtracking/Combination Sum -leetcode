class Solution {
    public void combi (int[] k,int n, int num, List<Integer> tempResult, List<List<Integer>> result, int i)
    {
         if(num==n)
                {
                    result.add(new ArrayList<>(tempResult));
                    return;
                }
            if(num>n || i> (k.length-1))
            {
                return;
            }
           tempResult.add(k[i]);
            // num+=k[i];
            combi(k,n,num+k[i],tempResult,result,i);
            tempResult.remove(tempResult.size()-1);
            // num-=k[i];
            // tempResult.add(k[i]);
            // num+=k[i];
            combi(k,n,num,tempResult,result,i+1);
            // tempResult.remove(tempResult.size()-1);
            // num-=k[i];

        
        return ;
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<Integer> tempResult= new ArrayList<>();
        List<List<Integer>> result= new ArrayList<>();
        int num=0;
        // for(int i=0;i<candidates.length;i++)
        // {
            combi(candidates,target,num,tempResult,result,0);
        // }
        
        return result;
    }
}
