//Initial Template for Java

import java.util.*;

public class GFG
{
    public static void main(String args[]) 
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) 
        {
            int n1 = sc.nextInt();
            int n2 = sc.nextInt();
            int n3 = sc.nextInt();
            
            int A[] = new int[n1];
            int B[] = new int[n2];
            int C[] = new int[n3];
            
            for (int i = 0;i < n1;i++)
            {
                A[i] = sc.nextInt();
            }
            for (int i = 0;i < n2;i++)
            {
                B[i] = sc.nextInt();
            }
            for (int i = 0;i < n3;i++)
            {
                C[i] = sc.nextInt();
            }
            
            Solution sol = new Solution();
            ArrayList<Integer> res = sol.commonElements(A, B, C, n1, n2, n3);
            if (res.size() == 0)
            {
                System.out.print(-1);
            }
            else 
            {
                for (int i = 0;i < res.size();i++)
                {
                    System.out.print(res.get(i) + " ");
                }    
            }
            System.out.println();
        }
    }
}


// } Driver Code Ends


//User function Template for Java

class Solution
{
    ArrayList<Integer> commonElements(int a[], int b[], int c[], int n1, int n2, int n3) 
    {
        int num=a[0];
		int i=0;
		int j=0;
		int k=0;
		int count=0;
		ArrayList<Integer> z= new ArrayList<Integer>();
		while(i<n1)
		{
			if(i>=n1 || j>= n2 || k>= n3)
			{
				break;
			}
			if(a[i]== b[j]&& b[j]==c[k])
			{
			if(!z.contains(a[i]))
				{ 
				    z.add(a[i]);}
				i++;
				j++;
				k++;
			}
			if(i>=n1 || j>= n2 || k>= n3)
			{
				break;
			}
			
			else if(a[i]>b[j] ) {
				j++;
				
			}
			else if( a[i]>c[k])
			{
				k++;
			}
			
			else if(b[j]>a[i])
			{
				i++;
				
			}
			else if( b[j]> c[k])
			{
				k++;
			}
			else if(c[k]>a[i])
			{
				i++;
				
			}
			else if(c[k] > b[j])
				
			{
				j++;
			}
			
		}
		return z;
    }
}
